/**
 Name: Firebase.js
 Description: This file will contain all the necessary functions that are related to firebase that will be utilized
 by other files as required
 Authors: @Justin Yau
*/

// Firebase Core App
import firebase from 'firebase'
require('firebase/auth');
import React from 'react';

// The configuration of the actual login credentials to access firebase.
// Must be updated to adhere a commercial config once released.
var firebaseConfig = {

};
// Initialize Firebase
firebase.initializeApp(firebaseConfig);

/// Function to determine whether or not the user has signed in previously or not
/// @author Justin Yau
function isSignedIn() {
    var user = firebase.auth().currentUser;

    return new Promise((resolve, reject) => {
        if (user) {
            // User is signed in.
            resolve(true);
        } else {
            // No user is signed in.
            resolve(false);
        }
    });
}

/// Function to process user input to create a sign up request
/// @param email - Email that was passed in
/// @param password - Password that was passed in
/// @param callback - Callback function that is to be called when the function operation is completed
/// @param callback1 - 2nd Callback function that is to be called when the function operation is completed
/// @author Justin Yau
function newUser(email, password, callback, callback1) {
    firebase.auth().createUserWithEmailAndPassword(email, password).then(() => {
        callback("");
        callback1(true);
    }).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        //var errorMessage = error.message;
        callback(handleCUError(errorCode));
        callback1(false);
    });
}

// This function matches the errorCode to those identified by FireBase and returns
// the appropriate message
// @param errorCode -- The code generated by the new user request
// @author Justin Yau
function handleCUError(errorCode) {
    switch(errorCode) {
        case "auth/email-already-in-use":
            return "Email is already taken! Try a different one!";
            break;
        case "auth/invalid-email":
            return "Invalid Email was submitted! Try a legitimate one!";
            break;
        case "auth/operation-not-allowed":
            return "Operation was not allowed!";
            break;
        case "auth/weak-password":
            return "Submitted Password was too weak! Try a different one!";
            break;
        default:
            return "An error occurred but has not been identified yet!";
            break;
    }
}

// Function that is used to have users sign in
// @param email -- The email that was entered
// @param password -- The password that was entered
// @param callback -- Callback function that is to be called once operations are completed
/// @param callback1 - 2nd Callback function that is to be called when the function operation is completed
// @author Justin Yau
function signIn(email, password, callback, callback1) {
    firebase.auth().signInWithEmailAndPassword(email, password)
        .then(() => {
            callback("");
            callback1(true);
        })
        .catch(function(error) {
            // Handle Errors here.
            var errorCode = error.code;
            //var errorMessage = error.message;
            callback(handleSIError(errorCode));
            callback1(false);
    });
}

// This function handles all the error codes that can be spawned by a sign in request
// @param errorCode -- The code that was spawned by a firebase sign in request
// @author Justin Yau
function handleSIError(errorCode) {
    switch(errorCode) {
        case "auth/invalid-email":
            return "Invalid Email was submitted! Try again!";
            break;
        case "auth/user-disabled":
            return "Your account has been disabled! Please contact us to lift the lock!";
            break;
        case "auth/user-not-found":
            return "User not found! Try again!";
            break;
        case "auth/wrong-password":
            return "Invalid password! Try again!";
            break;
        default:
            return "An error occurred but has not been identified yet!";
            break;
    }
}

// This function will be used to determine whether the user has already determined a username earlier
// @param callback -- The function to be called once the search is made
// @author Justin Yau
function hasName(callback) {
    const userId = firebase.auth().currentUser.uid;
    firebase.database().ref('/users/' + userId).once('value').then(function(snapshot) {
        if(snapshot.exists()) {
            callback(true, snapshot.val().username);
        } else {
            callback(false, "");
        }
    });
}

// This function will be used to set the username specified by the user when
// @param username -- The username that was inputted
// @param callback -- The function to be called once the operation is completed
// @author Justn Yau
function setUsername(username, callback) {
    const userId = firebase.auth().currentUser.uid;
    const userEmail = firebase.auth().currentUser.email;
    firebase.database().ref('users/' + userId).set({
        username: username,
        email: userEmail,
        userId: userId,
    }).then(() => {
        callback(true);
    }).catch(() => {
        callback(false);
    });
}

// This function is used to determine whether the user already has a conversation with the target person
// @param otherId -- The target id that the user wants to add
// @param callback -- The function to be called to return results
// @author Justin Yau
function hasConversation(otherId, callback) {
    const userId = firebase.auth().currentUser.uid;
    firebase.database().ref("/conversations/" + userId + "/" + otherId).once("value").then((snapshot) => {
        if(snapshot.exists()) {
            callback(true);
        } else {
            callback(false);
        }
    });
}

// This function is used to attempt to start a conversation with a target person
// @param email -- The email of the person that the user wants to start a conversation with
// @param username -- The username of the user
// @param callback -- The function to be called once results are determined
// @param dupe_callback -- The function to be called in the case that the user already made a request
// @param self_callback -- The function to be called in the case that the user wants to talk to themselves
// @author Justin Yau
function addConversation(email, username, callback, dupe_callback, self_callback) {
    const userId = firebase.auth().currentUser.uid;
    firebase.database().ref("/users/").orderByChild("email").equalTo(email).once("value").then((snapshot) => {
       var exists = false;
       var self = false;
       snapshot.forEach(function(childSnapshot) {
           const val = childSnapshot.val();
           if(val.userId === userId && !self) {
               self = true;
               exists = true;
               self_callback();
               return;
           }
           else if(!(val.userId === userId) && !exists) {
               exists = true;
               hasConversation(val.userId, (status) => {
                   if (status) {
                       dupe_callback();
                       return;
                   } else {
                       firebase.database().ref("/conversations/" + userId + "/" + val.userId).set({
                           other_username: val.username,
                           other_email: val.email,
                           other_userId: val.userId,
                           other_accept: false,
                       }).catch();
                       firebase.database().ref("/conversations/" + val.userId + "/" + userId).set({
                           other_username: username,
                           other_email: firebase.auth().currentUser.email,
                           other_userId: userId,
                           other_accept: true,
                       }).catch();
                       callback(true, val.username);
                       return;
                   }
           })}
       });
       if(!exists) {
           callback(false);
       }
    });
}

// This function will be used to sign users out of their current session
// @author Justin Yau
function signOut(callback) {
    firebase.auth().signOut().then(function() {
        // Sign-out successful.
        callback(true);
    }).catch(function(error) {
        // An error happened.
        callback(false);
    });
}

module.exports = {isSignedIn, newUser, signIn, signOut, hasName, setUsername, addConversation};