/**
 Name: Firebase.js
 Description: This file will contain all the necessary functions that are related to firebase that will be utilized
 by other files as required
 Authors: @Justin Yau
*/

// Firebase Core App
import firebase from 'firebase'
require('firebase/auth');
import React, { Component } from 'react';
import {StyleSheet, Text} from 'react-native';

// The configuration of the actual login credentials to access firebase.
// Must be updated to adhere a commercial config once released.
var firebaseConfig = {

};
// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Class Component that will be used to display error messages when signing up
// @author Justin Yau
class FireErrorText extends Component {

    _isMounted = false;

    constructor(props) {
        super(props);
        this.state = {
            errorMsg: "",
        };
        clearMsg = clearMsg.bind(this);
        handleCUError = handleCUError.bind(this);
        handleSIError = handleSIError.bind(this);
    }

    componentDidMount(): void {
        this._isMounted = true;
    }

    componentWillUnmount() {
        this._isMounted = false;
    }

    render() {
        return (
                <Text style={styles.errorMsg}>{this.state.errorMsg}</Text>
        );
    }
}

// Stylesheet that the components will use
// @author Justin Yau
const styles = StyleSheet.create({
    errorMsg: {
        color: "red",
    },
});

/// Function to determine whether or not the user has signed in previously or not
/// @author Justin Yau
function isSignedIn() {
    var user = firebase.auth().currentUser;

    return new Promise((resolve, reject) => {
        if (user) {
            // User is signed in.
            resolve(true);
        } else {
            // No user is signed in.
            resolve(false);
        }
    });
}

/// Function to process user input to create a sign up request
/// @param email - Email that was passed in
/// @param password - Password that was passed in
/// @param callback - Callback function that is to be called when the function operation is completed
/// @author Justin Yau
function newUser(email, password, callback) {
    clearMsg();
    firebase.auth().createUserWithEmailAndPassword(email, password).then(() => {
        callback(true);
    }).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        //var errorMessage = error.message;
        handleCUError(errorCode);
        callback(false);
    });
}

// This function matches the errorCode to those identified by FireBase and returns
// the appropriate message
// @param errorCode -- The code generated by the new user request
// @author Justin Yau
function handleCUError(errorCode) {
    if(this._isMounted) {
        switch(errorCode) {
            case "auth/email-already-in-use":
                this.setState({errorMsg: "Email is already taken! Try a different one!"});
                break;
            case "auth/invalid-email":
                this.setState({errorMsg: "Invalid Email was submitted! Try a legitimate one!"});
                break;
            case "auth/operation-not-allowed":
                this.setState({errorMsg: "Operation was not allowed!"});
                break;
            case "auth/weak-password":
                this.setState({errorMsg: "Submitted Password was too weak! Try a different one!"});
                break;
            default:
                this.setState({errorMsg: "An error occurred but has not been identified yet!"});
                break;
        }
    }
}

// Function that is used to have users sign in
// @param email -- The email that was entered
// @param password -- The password that was entered
// @param callback -- Callback function that is to be called once operations are completed
// @author Justin Yau
function signIn(email, password, callback) {
    clearMsg();
    firebase.auth().signInWithEmailAndPassword(email, password)
        .then(() => {
            callback(true);
        })
        .catch(function(error) {
            // Handle Errors here.
            var errorCode = error.code;
            //var errorMessage = error.message;
            handleSIError(errorCode);
            callback(false);
    });
}

// This function clears the error state of the component
// @author Justin Yau
function clearMsg() {
    if(this._isMounted) {
        this.setState({errorMsg: ""});
    }
}

// This function handles all the error codes that can be spawned by a sign in request
// @param errorCode -- The code that was spawned by a firebase sign in request
// @author Justin Yau
function handleSIError(errorCode) {
    if(this._isMounted) {
        switch(errorCode) {
            case "auth/invalid-email":
                this.setState({errorMsg: "Invalid Email was submitted! Try again!"});
                break;
            case "auth/user-disabled":
                this.setState({errorMsg: "Your account has been disabled! Please contact us to lift the lock!"});
                break;
            case "auth/user-not-found":
                this.setState({errorMsg: "User not found! Try again!"});
                break;
            case "auth/wrong-password":
                this.setState({errorMsg: "Invalid password! Try again!"});
                break;
            default:
                this.setState({errorMsg: "An error occurred but has not been identified yet!"});
                break;
        }
    }
}

// This function will be used to sign users out of their current session
// @author Justin Yau
function signOut(callback) {
    firebase.auth().signOut().then(function() {
        // Sign-out successful.
        callback(true);
    }).catch(function(error) {
        // An error happened.
        callback(false);
    });
}

module.exports = {isSignedIn, newUser, signIn, signOut, FireErrorText}