/**
 Name: Firebase.js
 Description: This file will contain all the necessary functions that are related to firebase that will be utilized
 by other files as required
 Authors: @Justin Yau
*/

// Firebase Core App
import firebase from 'firebase'
require('firebase/auth');
import React, { Component } from 'react';
import {StyleSheet, Text} from 'react-native';

// The configuration of the actual login credentials to access firebase.
// Must be updated to adhere a commercial config once released.
var firebaseConfig = {

};
// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Class Component that will be used to display error messages when signing up
// @author Justin Yau
class FireErrorText extends Component {
    constructor(props) {
        super(props);
        this.state = {
            errorMsg: "",
        };
        handleCUError = handleCUError.bind(this);
        handleSIError = handleSIError.bind(this);
    }

    render() {
        return (
                <Text style={styles.errorMsg}>{this.state.errorMsg}</Text>
        );
    }
}

// Stylesheet that the components will use
// @author Justin Yau
const styles = StyleSheet.create({
    errorMsg: {
        color: "red",
    },
});

/// Function to determine whether or not the user has signed in previously or not
/// @author Justin Yau
function isSignedIn() {
    var user = firebase.auth().currentUser;

    if (user) {
        // User is signed in.
        return true;
    } else {
        // No user is signed in.
        return false;
    }
}

/// Function to process user input to create a sign up request
/// @param email - Email that was passed in
/// @param password - Password that was passed in
/// @author Justin Yau
function newUser(email, password) {
    firebase.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        //var errorMessage = error.message;
        handleCUError(errorCode);
    });
}

// This function matches the errorCode to those identified by FireBase and returns
// the appropriate message
// @param errorCode -- The code generated by the new user request
// @author Justin Yau
function handleCUError(errorCode) {
    switch(errorCode) {
        case "auth/email-already-in-use":
            this.setState({errorMsg: "Email is already taken! Try a different one!"});
            break;
        case "auth/invalid-email":
            this.setState({errorMsg: "Invalid Email was submitted! Try a legitimate one!"});
            break;
        case "auth/operation-not-allowed":
            this.setState({errorMsg: "Operation was not allowed!"});
            break;
        case "auth/weak-password":
            this.setState({errorMsg: "Submitted Password was too weak! Try a different one!"});
            break;
        default:
            this.setState({errorMsg: "An error occurred but has not been identified yet!"});
            break;
    }
}

function signIn(email, password) {
    firebase.auth().signInWithEmailAndPassword(email, password).catch(function(error) {
        // Handle Errors here.
        var errorCode = error.code;
        //var errorMessage = error.message;
        handleSIError(errorCode);
    });
}

function handleSIError(errorCode) {
    switch(errorCode) {
        case "auth/invalid-email":
            this.setState({errorMsg: "Invalid Email was submitted! Try again!"});
            break;
        case "auth/user-disabled":
            this.setState({errorMsg: "Your account has been disabled! Please contact us to lift the lock!"});
            break;
        case "auth/user-not-found":
            this.setState({errorMsg: "User not found! Try again!"});
            break;
        case "auth/wrong-password":
            this.setState({errorMsg: "Invalid password! Try again!"});
            break;
        default:
            this.setState({errorMsg: "An error occurred but has not been identified yet!"});
            break;
    }
}

function signOut() {
    firebase.auth().signOut().then(function() {
        // Sign-out successful.
    }).catch(function(error) {
        // An error happened.
    });
}

module.exports = {isSignedIn, newUser, signIn, signOut, FireErrorText}